import asyncio
import logging
import os
import random
from functools import wraps

from aiohttp import web, ClientSession
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import (ReactionTypeEmoji, InlineKeyboardButton,
                           InlineKeyboardMarkup)
from aiogram.webhook.aiohttp_server import SimpleRequestHandler

# --------------------- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---------------------
API_TOKEN = os.getenv('BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
if not API_TOKEN or not WEBHOOK_URL:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ WEBHOOK_URL")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Character AI API
CHARACTER_ID = os.getenv("CHARACTER_ID")
CLIENT_API_KEY = os.getenv("CLIENT_API_KEY")
if not CHARACTER_ID or not CLIENT_API_KEY:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è CHARACTER_ID –∏ CLIENT_API_KEY")

WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = int(os.getenv('PORT', 10000))

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: [–Ω–∞–∑–≤–∞–Ω–∏–µ, chat_id, URL]
CHANNELS = [
    ["–•–∞—Ö–ë–æ—Ç –Ω–æ–≤–æ—Å—Ç–∏", "-1002404360993", "https://t.me/hahbot_news"]
]

# –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞–Ω–∞–ª—ã
NOT_SUB_MESSAGE = (
    "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
)

# --------------------- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ö–ò ---------------------
async def check_sub_channels(channels: list, user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (user_id) –Ω–∞ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –∏–Ω–∞—á–µ False.
    """
    for channel in channels:
        channel_id = channel[1]
        try:
            member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if member.status not in ["member", "administrator", "creator"]:
                return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id {user_id} –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
            return False
    return True

def subscription_required(handler):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏,
    –∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è.
    """
    @wraps(handler)
    async def wrapper(message: types.Message, *args, **kwargs):
        if not await check_sub_channels(CHANNELS, message.from_user.id):
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=channel[0], url=channel[2])]
                    for channel in CHANNELS
                ] + [[InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_sub")]]
            )
            await message.answer(NOT_SUB_MESSAGE, reply_markup=keyboard)
            return
        return await handler(message, *args, **kwargs)
    return wrapper

# --------------------- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–í–ï–¢–ê ---------------------
async def generate_character_ai_response(user_message: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Character AI API.

    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ,
    –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —á–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param user_message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    from characterai import aiocai  # –ò–º–ø–æ—Ä—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ CharacterAI
    try:
        client = aiocai.Client(CLIENT_API_KEY)
        me = await client.get_me()
        async with await client.connect() as chat:
            new_chat, greeting = await chat.new_chat(CHARACTER_ID, me.id)
            response = await chat.send_message(CHARACTER_ID, new_chat.chat_id, user_message)
            return response.text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Character AI API: {e}")
        return ""

# --------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---------------------
@dp.message()
@subscription_required
async def handle_message(message: types.Message):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Character AI API –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ Telegram.
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50% –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ä–µ–∞–∫—Ü–∏—è (—ç–º–æ–¥–∑–∏).
    """
    response_text = await generate_character_ai_response(message.text)
    if response_text:
        await message.answer(response_text)
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50%
    if random.random() < 0.5:
        reactions = [
            "üëç", "üëé", "‚ù§", "üî•", "ü•∞", "üëè", "üòÅ", "ü§î",
            "ü§Ø", "üò±", "ü§¨", "üò¢", "üéâ", "ü§©", "ü§Æ", "üí©",
            "üôè", "üëå", "üïä", "ü§°", "ü•±", "ü•¥", "üòç", "üê≥",
            "‚ù§‚Äçüî•", "üåö", "üå≠", "üíØ", "ü§£", "‚ö°", "üçå", "üèÜ",
            "üíî", "ü§®", "üòê", "üçì", "üçæ", "üíã", "üñï", "üòà",
            "üò¥", "üò≠", "ü§ì", "üëª", "üë®‚Äçüíª", "üëÄ", "üéÉ", "üôà",
            "üòá", "üò®", "ü§ù", "‚úç", "ü§ó", "ü´°", "üéÖ", "üéÑ",
            "‚òÉ", "üíÖ", "ü§™", "üóø", "üÜí", "üíò", "üôâ", "ü¶Ñ",
            "üòò", "üíä", "üôä", "üòé", "üëæ", "ü§∑‚Äç‚ôÇ", "ü§∑", "ü§∑‚Äç‚ôÄ",
            "üò°"
        ]
        reaction = random.choice(reactions)
        try:
            await message.react([ReactionTypeEmoji(emoji=reaction)], is_big=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def process_check_sub(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å".
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —É–¥–∞–ª—è—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    if await check_sub_channels(CHANNELS, callback_query.from_user.id):
        welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã."
        await bot.edit_message_text(
            text=welcome_text,
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        await callback_query.answer()  # –°–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏"
    else:
        await callback_query.answer("–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.", show_alert=True)

# --------------------- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ú–ê–†–®–†–£–¢ /check ---------------------
async def check_handler(request: web.Request) -> web.Response:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É—Ç–∏ /check.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "OK" –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞.
    """
    return web.Response(text="OK")

# --------------------- –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê KEEP-ALIVE ---------------------
async def keep_alive():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ –º–∞—Ä—à—Ä—É—Ç—É /check, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–ª –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º.
    """
    await asyncio.sleep(5)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    while True:
        try:
            async with ClientSession() as session:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º localhost –∏ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
                async with session.get(f"http://localhost:{WEBAPP_PORT}/check") as resp:
                    await resp.text()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ keep_alive: {e}")
        await asyncio.sleep(240)  # –∫–∞–∂–¥—ã–µ 4 –º–∏–Ω—É—Ç—ã

# --------------------- –ù–ê–°–¢–†–û–ô–ö–ê –í–ï–ë–•–£–ö–ê ---------------------
async def on_startup(app: web.Application):
    logging.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞...")
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç /check
    app.router.add_get("/check", check_handler)
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É keep_alive
    app['keep_alive'] = asyncio.create_task(keep_alive())

async def on_shutdown(app: web.Application):
    logging.info("–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏...")
    await bot.delete_webhook()
    try:
        await bot.session.close()
    except RuntimeError as e:
        if "Event loop is closed" in str(e):
            logging.warning("Event loop is closed –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        else:
            raise e
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É keep_alive
    if 'keep_alive' in app:
        app['keep_alive'].cancel()

app = web.Application()
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path='/webhook')
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

# --------------------- –¢–û–ß–ö–ê –í–•–û–î–ê ---------------------
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
