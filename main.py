import logging
import os
import random
from functools import wraps
import asyncio
import io  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
from typing import List

from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import ReactionTypeEmoji, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
import aiofiles  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
import httpx
from mtranslate import translate
from characterai import aiocai

# --------------------- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---------------------
API_TOKEN = os.getenv('BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
if not API_TOKEN or not WEBHOOK_URL:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ WEBHOOK_URL")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Character AI
CHARACTER_ID = os.getenv("CHARACTER_ID")
CLIENT_API_KEY = os.getenv("CLIENT_API_KEY")
if not CHARACTER_ID or not CLIENT_API_KEY:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è CHARACTER_ID –∏ CLIENT_API_KEY")

WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = int(os.getenv('PORT', 10000))

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: [–Ω–∞–∑–≤–∞–Ω–∏–µ, chat_id, URL]
CHANNELS: List[List[str]] = [
    ["–•–∞—Ö–ë–æ—Ç –Ω–æ–≤–æ—Å—Ç–∏", "-1002404360993", "https://t.me/hahbot_news"]
]

NOT_SUB_MESSAGE = (
    "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π
REACTIONS: List[str] = [
    "üëç", "üëé", "‚ù§", "üî•", "ü•∞", "üëè", "üòÅ", "ü§î",
    "ü§Ø", "üò±", "ü§¨", "üò¢", "üéâ", "ü§©", "ü§Æ", "üí©",
    "üôè", "üëå", "üïä", "ü§°", "ü•±", "ü•¥", "üòç", "üê≥",
    "‚ù§‚Äçüî•", "üåö", "üå≠", "üíØ", "ü§£", "‚ö°", "üçå", "üèÜ",
    "üíî", "ü§®", "üòê", "üçì", "üçæ", "üíã", "üñï", "üòà",
    "üò¥", "üò≠", "ü§ì", "üëª", "üë®‚Äçüíª", "üëÄ", "üéÉ", "üôà",
    "üòá", "üò®", "ü§ù", "‚úç", "ü§ó", "ü´°", "üéÖ", "üéÑ",
    "‚òÉ", "üíÖ", "ü§™", "üóø", "üÜí", "üíò", "üôâ", "ü¶Ñ",
    "üòò", "üíä", "üôä", "üòé", "üëæ", "ü§∑‚Äç‚ôÇ", "ü§∑", "ü§∑‚Äç‚ôÄ",
    "üò°"
]

# --------------------- –ó–ê–ì–†–£–ó–ö–ê –ü–†–û–ú–ü–¢–û–í ---------------------
# –§–∞–π–ª generate_image/prompts.txt –¥–æ–ª–∂–µ–Ω –∑–∞–¥–∞–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
# objects, places, styles, colors, adjectives, elements, improvers
async def load_prompts() -> None:
    async with aiofiles.open('generate_image/prompts.txt', mode='r', encoding='utf-8') as f:
        content = await f.read()
    exec(content, globals())
    logging.info("–ü—Ä–æ–º–ø—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# --------------------- –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ---------------------
async def check_sub_channels(channels: List[List[str]], user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.
    """
    for channel in channels:
        channel_id = channel[1]
        try:
            member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if member.status not in ["member", "administrator", "creator"]:
                return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id {user_id} –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
            return False
    return True

def subscription_required(handler):
    @wraps(handler)
    async def wrapper(message: types.Message, *args, **kwargs):
        if not await check_sub_channels(CHANNELS, message.from_user.id):
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=channel[0], url=channel[2])]
                    for channel in CHANNELS
                ] + [[InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_sub")]]
            )
            await message.answer(NOT_SUB_MESSAGE, reply_markup=keyboard)
            return
        return await handler(message, *args, **kwargs)
    return wrapper

# --------------------- –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–ê –ß–ï–†–ï–ó CHARACTER AI ---------------------
async def generate_character_response(user_prompt: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ API Character AI.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç.
    """
    try:
        client = aiocai.Client(CLIENT_API_KEY)
        me = await client.get_me()
        async with await client.connect() as chat:
            new_chat, _ = await chat.new_chat(CHARACTER_ID, me.id)
            response = await chat.send_message(CHARACTER_ID, new_chat.chat_id, user_prompt)
            return response.text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Character AI: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

# --------------------- –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ---------------------
async def generate_image_from_query(query: str) -> bytes:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞.
    –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∑–∞—Ç–µ–º –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
    """
    character_english = translate(query, 'en')
    object_choice = random.choice(objects)
    place_choice = random.choice(places)
    style_choice = random.choice(styles)
    color_choice = random.choice(colors)
    adjective_choice = random.choice(adjectives)
    element_choice = random.choice(elements)
    improver_choice = random.choice(improvers)
    
    prompt = (
        f"{character_english.upper()}, HYPERREALISM, IN THE FOREGROUND, MAIN FOCUS. "
        f"IN THE BACKGROUND, SECONDARY: {object_choice}, {place_choice}, {style_choice}, "
        f"{color_choice}, {adjective_choice}, {element_choice}, {improver_choice}"
    )
    random_seed = random.randint(1, 1000000)
    url = (
        f"https://image.pollinations.ai/prompt/{prompt.replace(' ', '%20')}"
        f"?seed={random_seed}&width=720&height=720&model=turbo&nofeed=true&nologo=true"
    )
    
    async with httpx.AsyncClient() as client:
        response = await client.get(url)
        if response.status_code == 200:
            return response.content
        else:
            raise Exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

# --------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ---------------------
@dp.message()
@subscription_required
async def handle_message(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    - –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "—Ö–∞—Ö–±–æ—Ç –Ω–∞—Ä–∏—Å—É–π", –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    - –ï—Å–ª–∏ —á–∞—Ç –ª–∏—á–Ω—ã–π, –±–æ—Ç –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç.
    - –í –≥—Ä—É–ø–ø–∞—Ö –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 20%, –µ—Å–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ "—Ö–∞—Ö–±–æ—Ç" –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–ø–ª–∞–µ–º,
      –∏–Ω–∞—á–µ ‚Äì 100%.
    –¢–∞–∫–∂–µ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50% –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è.
    """
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é (50% —à–∞–Ω—Å)
    if random.random() < 0.5:
        reaction_emoji = random.choice(REACTIONS)
        await message.react([ReactionTypeEmoji(emoji=reaction_emoji)], is_big=True)
    
    text_lower = message.text.lower().strip()
    activator = "—Ö–∞—Ö–±–æ—Ç –Ω–∞—Ä–∏—Å—É–π"
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "—Ö–∞—Ö–±–æ—Ç –Ω–∞—Ä–∏—Å—É–π", –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if text_lower.startswith(activator):
        query = message.text[len(activator):].strip()
        if not query:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å.")
            return
        try:
            image_bytes = await generate_image_from_query(query)
            photo = io.BytesIO(image_bytes)
            photo.name = 'generated_image.jpg'
            await message.answer_photo(photo, caption="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
    chat_type = message.chat.type
    should_respond = False
    if chat_type == "private":
        should_respond = True
    else:
        # –í –≥—Ä—É–ø–ø–∞—Ö:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ "—Ö–∞—Ö–±–æ—Ç" –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–ø–ª–∞–µ–º, –æ—Ç–≤–µ—á–∞–µ–º 100%
        if "—Ö–∞—Ö–±–æ—Ç" in text_lower or message.reply_to_message is not None:
            should_respond = True
        else:
            should_respond = random.random() < 0.2

    if not should_respond:
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Character AI
    generated_response = await generate_character_response(message.text)
    await message.answer(generated_response)

@dp.callback_query(lambda c: c.data == "check_sub")
async def process_check_sub(callback_query: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    if await check_sub_channels(CHANNELS, callback_query.from_user.id):
        welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã."
        await bot.edit_message_text(
            text=welcome_text,
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None
        )
        await callback_query.answer()
    else:
        await callback_query.answer("–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.", show_alert=True)

# --------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ü–£–¢–ò "/" ---------------------
async def handle_root(request: web.Request) -> web.Response:
    logging.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å –æ—Ç %s", request.remote)
    return web.Response(text="OK")

# --------------------- –ù–ê–°–¢–†–û–ô–ö–ê –í–ï–ë–•–£–ö–ê ---------------------
async def on_startup(app: web.Application) -> None:
    logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    await load_prompts()
    logging.info("–ü—Ä–æ–º–ø—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    logging.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞...")
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app: web.Application) -> None:
    logging.info("–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏...")
    await bot.delete_webhook()
    await bot.session.close()

app = web.Application()
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path='/webhook')
app.router.add_get("/", handle_root)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

# --------------------- –¢–û–ß–ö–ê –í–•–û–î–ê ---------------------
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
