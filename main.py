import logging
import os
import random
from functools import wraps

from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import ReactionTypeEmoji, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.webhook.aiohttp_server import SimpleRequestHandler

# --------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---------------------

API_TOKEN = os.getenv('BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
if not API_TOKEN or not WEBHOOK_URL:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ WEBHOOK_URL")

WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = int(os.getenv('PORT', 10000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ, chat_id, URL]
CHANNELS = [
    ["–•–∞—Ö–ë–æ—Ç –Ω–æ–≤–æ—Å—Ç–∏", "-1002404360993", "https://t.me/hahbot_news"]
]

# –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞–Ω–∞–ª(—ã)
NOT_SUB_MESSAGE = (
    "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
)

# --------------------- –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ---------------------

async def check_sub_channels(channels: list, user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (user_id) –Ω–∞ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ get_chat_member –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
    """
    for channel in channels:
        channel_id = channel[1]
        try:
            member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if member.status not in ["member", "administrator", "creator"]:
                return False
        except Exception as e:
            logging.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id {user_id} –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}"
            )
            return False
    return True

def subscription_required(handler):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏.
    """
    @wraps(handler)
    async def wrapper(message: types.Message, *args, **kwargs):
        user_id = message.from_user.id
        if not await check_sub_channels(CHANNELS, user_id):
            # –ü–µ—Ä–µ–¥–∞—ë–º —è–≤–Ω–æ inline_keyboard=[], —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[], row_width=1)
            for channel in CHANNELS:
                subscribe_button = InlineKeyboardButton(text=channel[0], url=channel[2])
                keyboard.add(subscribe_button)
            check_button = InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_sub")
            keyboard.add(check_button)
            await message.answer(NOT_SUB_MESSAGE, reply_markup=keyboard)
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        return await handler(message, *args, **kwargs)
    return wrapper

# --------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---------------------

@dp.message()
@subscription_required
async def handle_message(message: types.Message):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50% –±–æ—Ç —Å—Ç–∞–≤–∏—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é.
    """
    if random.random() < 0.5:
        reactions = [
            "üëç", "üëé", "‚ù§", "üî•", "ü•∞", "üëè", "üòÅ", "ü§î",
            "ü§Ø", "üò±", "ü§¨", "üò¢", "üéâ", "ü§©", "ü§Æ", "üí©",
            "üôè", "üëå", "üïä", "ü§°", "ü•±", "ü•¥", "üòç", "üê≥",
            "‚ù§‚Äçüî•", "üåö", "üå≠", "üíØ", "ü§£", "‚ö°", "üçå", "üèÜ",
            "üíî", "ü§®", "üòê", "üçì", "üçæ", "üíã", "üñï", "üòà",
            "üò¥", "üò≠", "ü§ì", "üëª", "üë®‚Äçüíª", "üëÄ", "üéÉ", "üôà",
            "üòá", "üò®", "ü§ù", "‚úç", "ü§ó", "ü´°", "üéÖ", "üéÑ",
            "‚òÉ", "üíÖ", "ü§™", "üóø", "üÜí", "üíò", "üôâ", "ü¶Ñ",
            "üòò", "üíä", "üôä", "üòé", "üëæ", "ü§∑‚Äç‚ôÇ", "ü§∑", "ü§∑‚Äç‚ôÄ",
            "üò°"
        ]
        reaction_emoji = random.choice(reactions)
        reaction_obj = ReactionTypeEmoji(emoji=reaction_emoji)
        await message.react([reaction_obj], is_big=True)

@dp.callback_query(lambda c: c.data == "check_sub")
async def process_check_sub(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å".
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ.
    """
    user_id = callback_query.from_user.id
    if await check_sub_channels(CHANNELS, user_id):
        await callback_query.answer("–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
        # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    else:
        await callback_query.answer(
            "–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.", show_alert=True
        )

# --------------------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤–µ–±—Ö—É–∫–∞ ---------------------

async def on_startup(app: web.Application):
    logging.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞...")
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    logging.info("–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏...")
    await bot.delete_webhook()
    await bot.session.close()

# --------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---------------------

app = web.Application()
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path='/webhook')
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

# --------------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---------------------

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
